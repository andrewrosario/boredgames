type Query {
    users: [User]
    userByEmail(email: String): User
    games: [Game]
    reviews: [Review]
}

type Mutation {
    createUser(userInput: UserInput): User
    createGame(userEmail: String, game: GameInput): Game
    createReview(reviewInput: ReviewInput, userId: String, gameId: String): Review
    login(email: String, password: String): LoginPayload
}

type LoginPayload {
    jwt: String
    user: User
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    fullName: String
    email: String!
    reviews: [Review]
    games: [Game]
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

input GameInput {
    name: String
    description: String
    yearReleased: Int
    numberOfPlayers: Int
    userEmail: String
    genre: Genre
}

type Game {
    id: ID!
    name: String!
    description: String!
    genre: Genre!
    user: User!
    yearReleased: Int
    numberOfPlayers: Int!
    reviews: [Review]
}

enum Genre {
    FAMILY
    DEXTERITY
    TRIVIA
    PARTY
    STRATEGY
    CREATIVE
    COOPERATIVE
}

type Review {
    id: ID!
    title: String!
    description: String!
    rating: Int!
    game: Game
    user: User
}

input ReviewInput {
    title: String
    description: String
    rating: Int
}
